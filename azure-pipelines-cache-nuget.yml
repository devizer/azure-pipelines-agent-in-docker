variables:
  NUGET_VERSION: 0.1
  VERSIONS: "3.1 5.0 6.0 7.0"
  MORE_PACKAGES: 'Hangfire.Core Hangfire.AspNetCore Hangfire.InMemory Hangfire.Console Microsoft.NETFramework.ReferenceAssemblies'

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'azure-pipelines-cache-nuget.yml'
    exclude:
    - '**'

jobs:

- job: BuildCache
  pool:
    vmImage: '$(IMAGE)'
  timeoutInMinutes: 66
  strategy:
    maxParallel: 6
    matrix:
      'On Mac OS':
        IMAGE: 'macos-12'
        SUFFIX: Darwin
      'On Windows 2022':
        IMAGE: 'windows-2022'
        SUFFIX: Windows
      'On Ubuntu 22.04':
        IMAGE: 'ubuntu-22.04'
        SUFFIX: Linux

  steps:
  - bash: |
      echo "uname -s: [$(uname -s)]"
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
      dotnet --info

      Say "Wipe out existing dotnet sdk"
      sudo rm -rf 'C:\Program Files\dotnet' /usr/share/dotnet /usr/local/share/dotnet || rm -rf 'C:\Program Files\dotnet' /usr/share/dotnet /usr/local/share/dotnet

      Say "Installing DotNet. Versions are $VERSIONS"
      for ver in $VERSIONS; do
        export DOTNET_TARGET_DIR="$HOME/DOTNET-$ver"
        export DOTNET_VERSIONS="$ver"
        script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; 
        for d in /usr/share /usr/local/share; do
          test -s ${d}/dotnet/dotnet && sudo ln -f -s ${d}/dotnet/dotnet /usr/local/bin/dotnet
        done;

        echo "DOT INFO"
        $DOTNET_TARGET_DIR/dotnet --info

        $DOTNET_TARGET_DIR/dotnet new list > "$SYSTEM_ARTIFACTSDIRECTORY/PROJECT TYPES v${ver} (new).txt" 2>&1
        $DOTNET_TARGET_DIR/dotnet new --list > "$SYSTEM_ARTIFACTSDIRECTORY/PROJECT TYPES v${ver} (legacy).txt" 2>&1
        rm -rf ~/.nuget/packages
        types="webapi nunit xunit console webapp web mvc react"
        for type in $types; do
          Say "Caching dependecies for [$type]"
          rm -rf project${type}
          
          set -o pipefail
          $DOTNET_TARGET_DIR/dotnet new --no-restore $type -o project${type} | tee "$SYSTEM_ARTIFACTSDIRECTORY/$ver-$type-new.log" || $DOTNET_TARGET_DIR/dotnet new $type -o project${type} | tee "$SYSTEM_ARTIFACTSDIRECTORY/$ver-$type-new.log"
          cd project${type}

          if [[ "$type" == webapi ]]; then
          for p in $MORE_PACKAGES; do
            Say "Adding package $p"
            $DOTNET_TARGET_DIR/dotnet add package $p >/dev/null
          done
          fi

          Say "Building [$type]"
          # $DOTNET_TARGET_DIR/dotnet restore -v:q --nologo || $DOTNET_TARGET_DIR/dotnet restore --disable-parallel -v:q --nologo
          # $DOTNET_TARGET_DIR/dotnet build -v:q --nologo
          $DOTNET_TARGET_DIR/dotnet publish -v:q --nologo
          cd ..
        done
        # Smart-Sudo rm -rf "$DOTNET_TARGET_DIR" || rm -rf "$DOTNET_TARGET_DIR"
        Say "Pack ~/.nuget/packages"
        f="$SYSTEM_ARTIFACTSDIRECTORY/nuget-packages-$ver-$SUFFIX.7z"
        Say "Pack $f"
        time 7z a -mx=9 -ms=on -mqs=on "$f" ~/.nuget/packages || Say --Display-As=Error "Pack Artifact Error"

      done

    condition: succeededOrFailed()
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

