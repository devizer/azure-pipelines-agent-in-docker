variables:
  CMAKE_VER: 3.21.5

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'build-tools/*'

jobs:

- job: 'build_static_cmake'
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: 360
  strategy:
    maxParallel: 10
    matrix:
      'amd64':
        PLATFORM: "amd64"
      'i386':
        PLATFORM: "386"
      # 'armv6':
      #   PLATFORM: "armv6"
      # 'armv7':
      #   PLATFORM: "armv7"
      # 'arm64':
      #   PLATFORM: "arm64"
      # 'ppc64le':
      #   PLATFORM: "ppc64le"
      # 'riscv64':
      #   PLATFORM: "riscv64"
      # 's390x':
      #   PLATFORM: "s390x"

  steps:
  - script: |
      set -eu; set -o pipefail
      cd build-tools
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "qemu user static"
      # sudo apt-get install qemu-user-static -y -qq >/dev/null
      docker run --name qemu-user-static multiarch/qemu-user-static >/dev/null 2>&1 || true
      sudo docker cp qemu-user-static:/usr/bin/. /usr/bin
      /usr/bin/qemu-arm-static --version
      Say "Register qemu static"
      docker run --rm --privileged multiarch/qemu-user-static:register --reset >/dev/null 2>&1
      utils_fixed_url=https://raw.githubusercontent.com/devizer/NetCore.CaValidationLab/58e96809ba79e162b901095fad1c6555bb91b746/4gcc/build-gcc-utilities.sh
      utils_master_url=https://raw.githubusercontent.com/devizer/NetCore.CaValidationLab/master/4gcc/build-gcc-utilities.sh
      try-and-retry curl -kSL -o /tmp/build-gcc-utilities.sh "${utils_master_url}"
      source /tmp/build-gcc-utilities.sh
      say_cpu_name
      CONTAINER="builder"

      # PLATFORM=armv7
      json="$(Get-Docker-Image-Manifest "alpine:edge")"
      Say "Beauty alpine:edge"; 
      cat "$json" | Docker-Image-Manifest-As-Table
      digest="$(cat "$json" | Find-Docker-Image-Digest-for-Architecture "$PLATFORM")"
      Say "Digest of [$PLATFORM] is [$digest]"

      IMAGE="alpine:edge@${digest}"
      docker pull "$IMAGE" >/dev/null
      docker run -d --sysctl net.ipv6.conf.all.disable_ipv6=1 --privileged --hostname "$CONTAINER" --name "$CONTAINER" -v /usr/bin/qemu-s390x-static:/usr/bin/qemu-s390x-static -v /usr/bin/qemu-riscv64-static:/usr/bin/qemu-riscv64-static -v /usr/bin/qemu-ppc64le-static:/usr/bin/qemu-ppc64le-static -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static "$IMAGE" sh -c 'tail -f /dev/null'
      for f in /usr/local/bin/Say /usr/local/bin/try-and-retry; do
        docker cp $f "$CONTAINER":/usr/bin/.
      done
      for f in "$(pwd)/"*.sh /tmp/build-gcc-utilities.sh; do
        Say "copying $f to the container"
        docker cp "$f" "$CONTAINER":/root/.
      done

      docker exec -t $CONTAINER sh -c 'apk add bash; Say --Reset-Stopwatch; Say "Builder is Ready"; apk upgrade;'
      docker exec -t -e PLATFORM="$PLATFORM" -e SYSTEM_ARTIFACTSDIRECTORY="${SYSTEM_ARTIFACTSDIRECTORY:-}" $CONTAINER bash -e -u -c "cd /root; source /root/build-gcc-utilities.sh; say_cpu_name; Say $(uname -m); source build-static-portable-cmake.sh"
    displayName: 'Static CMake $(CMAKE_VER)'

  - script: |
      set -eu; set -o pipefail
      Say "grab cmake artifacts"
      CONTAINER="builder"
      sudo chown -R root:root .
      source /tmp/build-gcc-utilities.sh
      for suffix in "" "-stripped"; do
          mkdir -p ~/my-cmake${suffix}
          docker cp $CONTAINER:/opt/cmake${suffix}/. ~/my-cmake${suffix}
          cd ~/my-cmake${suffix}
          tar="$SYSTEM_ARTIFACTSDIRECTORY/cmake-$(CMAKE_VER)-${PLATFORM}${suffix}"
          sudo tar cf - . | xz -z -9 -e > "$tar.tar.xz"
          sudo tar cf - . | gzip -9 > "$tar.tar.gz"
          sudo tar cf - . | bzip2 -z -9 > "$tar.tar.bz2"
          for ext in xz gz bz2; do
            build_all_known_hash_sums "$tar.tar.$ext"
          done
          # strip bin/* || true
      done
      Say "Bye"
    condition: succeededOrFailed()
    displayName: 'grab artifacts $(CMAKE_VER)'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

- job: 'deploy_static_cmake'
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: 360
  dependsOn: build_static_cmake

  steps: 
  - download: current
    artifact: WebApp
    patterns: |
        **

  - script: |
      set -eu; set -o pipefail
      sudo apt-get install tree -y -qq >/dev/null
      Say "Pipeline.Workspace: $(Pipeline.Workspace)"
      Say "PIPELINE_WORKSPACE: $PIPELINE_WORKSPACE"
      tree -h -du $PIPELINE_WORKSPACE

      sudo apt-get install -y ruby-dev | grep Setting || true; sudo gem install dpl dpl-releases
      echo "Deploy tool version: $(gem list --local | grep dpl | sort)"
    displayName: 'Deploy GitHub Release $(CMAKE_VER)'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(Pipeline.Workspace)'
      artifactName: '$(Agent.JobName)'

