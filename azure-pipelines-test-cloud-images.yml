variables:
  THEWORKDIR: /transient-builds

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'Cloud-Images/*'

jobs:

- job: Test
  pool:
    vmImage: $(POOL)
  timeoutInMinutes: 120
  strategy:
    maxParallel: 4
    matrix:
      'ubuntu':
        POOL: ubuntu-latest
      'mac-11':
        POOL: macos-11
        THEWORKDIR: /Users/runner/transient-builds
      'mac-12':
        POOL: macos-12
        THEWORKDIR: /Users/runner/transient-builds
      'mac-13':
        POOL: macos-13
        THEWORKDIR: /Users/runner/transient-builds

  steps:
  - script: |
      set -eu; set -o pipefail
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      echo "CPU: $(Get-CpuName)"
      printenv | sort;
    displayName: 'Variables'

  - script: |
      echo "CPU: $(Get-CpuName)"
      Say "IO Benchmark for $HOME"
      [ "$(uname -s)" = Darwin ] && export DISABLE_UNICODE=True && brew install fio
      File-IO-Benchmark "HOME FS" $HOME 4G $(nproc)T 30 1
    displayName: 'IO Benchmark for ${{ variables.HOME }}'

  - script: |
      echo "CPU: $(Get-CpuName)"
      Say "Installing 7z 23.01"
      export INSTALL_DIR=/usr/local/bin LINK_AS_7Z=/usr/local/bin/7z; script="https://raw.githubusercontent.com/devizer/azure-pipelines-agent-in-docker/master/build-tools/install-7zz%20(direct%20from%207-zip.org).sh"; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      7z b -mmt=1 -md=18
    displayName: 'Benchmark'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      
      export SECOND_DISK_MODE=LOOP
      export RESET_FOLDERS_TO_RAID="/var/lib/apt;$THEWORKDIR;/var/cache/apt;$SYSTEM_ARTIFACTSDIRECTORY;/tmp;/var/tmp"
      export LOOP_DIRECT_IO=off
      export MOVE_DOCKER_TO_RAID=""
      export FS=BTRFS-Compressed
      export BTRFS_COMPRESS_MODE=zstd:1
      url=https://raw.githubusercontent.com/devizer/glist/master/Raid0-on-Azure-Pipelines-Linux.sh; (wget -q -nv --no-check-certificate -O - $url 2>/dev/null || curl -ksSL $url) | bash
      Say "Mounts"
      df -h -T
      echo ""
      sudo mount

      Say "/proc/sys/kernel/randomize_va_space"
      sudo cat /proc/sys/kernel/randomize_va_space
      echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
      
      Say "Install qemu-system"
      time (sudo apt-get update -qq; sudo apt-get install btrfs-compsize qemu-system-arm qemu-system-x86 qemu-system-i386 sshpass sshfs qemu-efi -y -qq | grep "Unpack\|Setting\|initram"; )

      # config sshfs and sshpass
      mkdir -p ~/.ssh; printf "Host *\n   StrictHostKeyChecking no\n   UserKnownHostsFile=/dev/null" > ~/.ssh/config
      # fusermount3: option allow_other only allowed if 'user_allow_other' is set in /etc/fuse.conf
      printf "\nuser_allow_other\n" | sudo tee -a /etc/fuse.conf

      try-and-retry curl -kfsSL -o /tmp/build-gcc-utilities.sh "https://raw.githubusercontent.com/devizer/NetCore.CaValidationLab/master/4gcc/build-gcc-utilities.sh"
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Provisioning Linux'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      sudo mkdir -p $THEWORKDIR; sudo chown -R $USER $THEWORKDIR;
      for p in "brew install --cask macfuse" "brew install --cask osxfuse" "brew install qemu" "brew cask install osxfuse" "brew install homebrew/fuse/sshfs" "brew install hudochenkov/sshpass/sshpass"; do
        Say "Installing [$p]"; time eval $p && Say "Done: [$p]" || Say --Display-As=Error "Error installing [$p]";
      done
      
      for p in homebrew/fuse/sshfs qemu sshpass sshfs hudochenkov/sshpass/sshpass; do Say "Installing $p"; time brew install $p && Say "Done: $p" || Say --Display-As=Error "Error installing $p"; done
    condition: eq(variables['Agent.OS'], 'Darwin')
    displayName: 'Provisioning Mac'

  - script: |
      set -eu; set -o pipefail
      echo "CPU: $(Get-CpuName)"
      Say --Reset-Stopwatch
      cd Cloud-Images
      bash -eu Step-DownloadAll.sh
    # condition: succeededOrFailed()
    displayName: 'Download All'

  - task: PublishBuildArtifacts@1
    condition: succeeded()
    displayName: 'Publish Final'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: 'Succeeded $(Agent.JobName)'
