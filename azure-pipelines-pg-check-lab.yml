variables:
  QA: 42

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'postgres-lab/*'

jobs:

- job: PG
  displayName: 'PG'
  pool:
    vmImage: '$(VM)'
  timeoutInMinutes: 30
  strategy:
    matrix:
      'Ubuntu 22.04':
        VM: ubuntu-22.04
      'Ubuntu 20.04 V14':
        VM: ubuntu-20.04
        PGVERSION: 14
      'Ubuntu 20.04 V13':
        VM: ubuntu-20.04
        PGVERSION: 13
      'Ubuntu 20.04 V12':
        VM: ubuntu-20.04
        PGVERSION: 12
      'Ubuntu 20.04 V11':
        VM: ubuntu-20.04
        PGVERSION: 11
      'Ubuntu 18.04':
        VM: ubuntu-18.04

  steps:
  - bash: |
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "Install"
      sudo apt-get update -qq
      sudo apt-get install libecpg-dev -y -qq |& grep Setting
      sudo pip install pgsanity
      set -eu
      function check_sql() {
        echo "$1" > code.sql
        Say "pgsanity: '$(cat code.sql)'"
        err=none;
        pgsanity code.sql || err=$?
        echo "ERROR CODE IS [$err]"
      }
      check_sql "Select Version();"
      check_sql "Select AnError;"
      check_sql 'Select column1 From table1;'
      check_sql "Syntax Error;"
    displayName: 'pgsanity: install'

  - bash: |
      set -eu
      PGVERSION="${PGVERSION:-11}"
      Say "Install plpgsql_check for Version $PGVERSION"
      sudo rm -rf /etc/postgresql /var/lib/postgresql
      sudo apt-get install -y -qq postgresql-common |& {grep Setting || true;}
      sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -p -v 11 -i
      sudo apt-get install -y bison flex libicu-dev libssl-dev |& {grep Setting || true;}
      sudo -u postgres createuser --superuser $USER

      git clone https://github.com/okbob/plpgsql_check
      cd plpgsql_check
      make -j
      sudo make install
      make installcheck
      ls -la regression.diffs || true
      if test -s regression.diffs; then cat regression.diffs; fi
    condition: succeededOrFailed()
    displayName: 'plpgsql_check: install'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'
