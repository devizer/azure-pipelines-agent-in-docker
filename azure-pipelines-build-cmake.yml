variables:
  CMAKE_VER: 3.23.2
  # CMAKE_VER: 3.22.3

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'build-tools/*'

jobs:

- job: cmake
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: 360
  strategy:
    matrix:
      # default is the latest GCC 11.2 
      'arm32v6':
        IMAGE: "devizervlad/raspbian:raspberry-wheezy"
        SKIP_NINJA_TESTS: 'True'
        MACHINE: 'arm32v6'
        GCCVER: "11.2"
        GCC_INSTALL_ARCH: 'armv6'
      'arm32v5':
        IMAGE: "arm32v5/debian:7"
        SKIP_NINJA_TESTS: 'True'
        MACHINE: 'arm32v5'
        GCCVER: "11.2"
        GCC_INSTALL_ARCH: 'armv5'
      'x86-64':
        IMAGE: "debian:7"
      'arm32v7':
        IMAGE: "arm32v7/debian:7"
        SKIP_NINJA_TESTS: 'True'
        MACHINE: 'arm32v7'
      'i386':
        IMAGE: "i386/debian:7"
        MACHINE: 'i386'
        GCCVER: "11.2"
      'arm64v8 GCC-11':
        IMAGE: "arm64v8/debian:8"
        # GCCVER: "11"
        SKIP_NINJA_TESTS: 'True'

  steps:
  - script: |
      set -eu; set -o pipefail
      cd build-tools
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "qemu user static"
      sudo apt-get update -qq; sudo apt-get install qemu-user-static -y -qq >/dev/null
      Say "Register qemu static"
      docker run --rm --privileged multiarch/qemu-user-static:register --reset >/dev/null 2>&1
      for f in build-gcc-utilities.sh build-gcc-task.sh; do
        try-and-retry curl -kSL -o /tmp/$f https://raw.githubusercontent.com/devizer/NetCore.CaValidationLab/master/4gcc/$f
      done
      CONTAINER="builder"
      docker pull "$IMAGE" >/dev/null
      docker run -d --sysctl net.ipv6.conf.all.disable_ipv6=1 --privileged --hostname "$CONTAINER" --name "$CONTAINER" -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static "$IMAGE" sh -c 'tail -f /dev/null'
      for f in /usr/local/bin/Say /usr/local/bin/try-and-retry; do
        docker cp $f "$CONTAINER":/usr/bin/.
      done
      for f in $(pwd)/build-cmake.sh $(pwd)/build-ninja.sh /tmp/build-gcc-utilities.sh; do
        docker cp $f "$CONTAINER":/root/.
      done

      docker exec -t -e CMAKE_VER="$CMAKE_VER" -e GCC_INSTALL_ARCH="${GCC_INSTALL_ARCH:-}" -e MACHINE="${MACHINE:-}" -e GCCVER="${GCCVER:-}" -e SKIP_NINJA_TESTS="${SKIP_NINJA_TESTS:-}" $CONTAINER bash -e -c "cd /root; Say --Reset-Stopwatch; echo GCCVER is \${GCCVER:-}; export DEBIAN_FRONTEND=noninteractive; source /root/build-gcc-utilities.sh; prepare_os; Say Ready; bash -e build-cmake.sh"
      docker cp $CONTAINER:/opt/local-links/. "$SYSTEM_ARTIFACTSDIRECTORY"
      rm -rf "$SYSTEM_ARTIFACTSDIRECTORY/cmake" || true # WTH?

    displayName: 'cmake'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'
