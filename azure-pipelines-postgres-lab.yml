variables:
  QA: 42

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - 'postgres-lab/*'

jobs:

- job: PG
  pool:
    vmImage: '$(VM)'
  timeoutInMinutes: 30
  strategy:
    matrix:
      'V9-W2022': 
        VM: windows-2022
        PKG: postgresql9
        SVC: postgresql-x64-9.6
      'V10-W2022': 
        VM: windows-2022
        PKG: postgresql10
        SVC: postgresql-x64-10
      'V11-W2022': 
        VM: windows-2022
        PKG: postgresql11
        SVC: postgresql-x64-11
      'V12-W2022': 
        VM: windows-2022
        PKG: postgresql12
        SVC: postgresql-x64-12
      'V13-W2022': 
        VM: windows-2022
        PKG: postgresql13
        SVC: postgresql-x64-13
      'V14-W2022': 
        VM: windows-2022
        PKG: postgresql14
        SVC: postgresql-x64-14
        TOREMOVE: postgresql14
      'Latest-W2022': 
        VM: windows-2022
        PKG: postgresql
        SVC: postgresql-x64-14
        TOREMOVE: postgresql14

      'V9-W2019': 
        VM: windows-2019
        PKG: postgresql9
        SVC: postgresql-x64-9.6
      'V10-W2019': 
        VM: windows-2019
        PKG: postgresql10
        SVC: postgresql-x64-10
      'V11-W2019': 
        VM: windows-2019
        PKG: postgresql11
        SVC: postgresql-x64-11
      'V12-W2019': 
        VM: windows-2019
        PKG: postgresql12
        SVC: postgresql-x64-12
      'V13-W2019': 
        VM: windows-2019
        PKG: postgresql13
        SVC: postgresql-x64-13
      'V14-W2019': 
        VM: windows-2019
        PKG: postgresql14
        SVC: postgresql-x64-14
        TOREMOVE: postgresql14
      'Latest-W2019': 
        VM: windows-2019
        PKG: postgresql
        SVC: postgresql-x64-14
        TOREMOVE: postgresql14


  steps:
  - powershell: |
      Write-Host "OS: $((Get-WmiObject -class Win32_OperatingSystem).Caption)"
      Get-ChildItem -Path Env: | ft -autosize
    displayName: 'INFO'

  - script: |
      docker search postgres
      echo " "
      docker run -t --rm -e POSTGRES_PASSWORD=test -e POSTGRES_HOST_AUTH_METHOD=trust postgres
    displayName: 'DOCKER'

  - powershell: |
      get-wmiobject Win32_Product | sort Name|Format-Table IdentifyingNumber, Name, LocalPackage -AutoSize
    displayName: 'MSI INFO'

  - script: |
      @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
      choco list --local-only
      If Defined TOREMOVE (
        echo "Removing %TOREMOVE%"
        pushd "C:\Program Files\PostgreSQL\14"
        uninstall-postgresql.exe --mode unattended --unattendedmodeui none
        popd
        ping -n 100 127.0.0.1 >nul
        echo "Cleaning C:\Program Files\PostgreSQL\14"
        rd /q /s "C:\Program Files\PostgreSQL\14"
        choco uninstall -my postgresql14
        choco uninstall -my postgresql
        --unattendedmodeui 
      )
      choco install --no-progress --params '/Password:test' %PKG% -my
    condition: succeededOrFailed()
    displayName: 'Install Postgres'

  - script: |
      echo "1)"
      echo PATH is [%PATH%]
      for %%v in (9.3 9.6 10 11 12 13 14) DO (
        echo "2]: %%v"
        if exist "C:\Program Files\PostgreSQL\%%v\bin\psql.exe" (
          echo "3] Exists: C:\Program Files\PostgreSQL\%%v\bin\psql.exe"

          rem echo Adding C:\Program Files\PostgreSQL\%%v\bin to Path
          rem SET PATH=C:\Program Files\PostgreSQL\%%v\bin;%PATH%
          rem echo PATH is [%PATH%]
          rem echo "##vso[task.setvariable variable=PATH]%PATH%"

          set PGPASSWORD=test
          rem psql -V >> "%SYSTEM_ARTIFACTSDIRECTORY%\psql-version.txt"
          "C:\Program Files\PostgreSQL\%%v\bin\psql.exe" -V
          "C:\Program Files\PostgreSQL\%%v\bin\psql.exe" -Upostgres -c "SHOW server_version;"
          "C:\Program Files\PostgreSQL\%%v\bin\psql.exe" -c "Select Version();"
        )
      )
      echo "fin"
    condition: succeededOrFailed()
    displayName: 'Symlink Postgres'

  - powershell: |
      get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName
    condition: succeededOrFailed()
    displayName: 'SQL Services'

  - powershell: |
      $ErrorActionPreference="Continue"
      $Env:PGPASSWORD='test'; 
      psql -Upostgres -c "SHOW server_version;"
      psql -Upostgres -c "Select Version();"
      echo "Bye Bye"
    condition: succeededOrFailed()
    displayName: 'Connection Info (powershell)'

  - powershell: |
      get-wmiobject win32_service | where {$_.Name.ToLower().IndexOf("sql") -ge 0 } | sort-object -Property "DisplayName" | ft State, Name, DisplayName, StartMode, StartName
    condition: succeededOrFailed()
    displayName: 'SQL Services'


  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'
